(function(){"use strict";var __webpack_modules__={90:function(){eval('\n;// CONCATENATED MODULE: ./src/scripts/trade.js\nconst ORIGIN = "Portugal";\nclass Trade {\n  constructor(partner, year, tradeFlow, productGroup, amount) {\n    this.origin = ORIGIN;\n    this.partner = partner.trim();\n    this.year = parseInt(year.trim());\n    this.tradeFlow = tradeFlow.trim();\n    this.productGroup = productGroup.trim();\n    this.amount = parseFloat(amount.trim());\n  }\n  toHTML() {\n    return `<ul>\n                    <li>In ${this.year}</li>\n                    <li>${this.productGroup}</li>\n                    <li>${this.tradeFlow} ${this.tradeFlow === \'Export\' ? \'to\' : \'from\'} ${this.partner}</li>\n                    <li>Trade Amount $${(this.amount * 1000).toLocaleString("en-US")}</li>\n                </ul>`;\n  }\n}\nfunction getOrigin() {\n  return ORIGIN;\n}\n/* harmony default export */ var scripts_trade = (Trade);\n;// CONCATENATED MODULE: ./src/scripts/barChart.js\nconst WIDTH = 900;\nconst HEIGHT = 450;\nconst BAR_COLOR = "#ffa876";\nclass BarChart {\n  constructor(trades, range) {\n    this.trades = trades;\n    this.range = range;\n    this.margin = {\n      top: 20,\n      right: 90,\n      bottom: 80,\n      left: 180\n    };\n    this.width = WIDTH - this.margin.left - this.margin.right;\n    this.height = HEIGHT - this.margin.top - this.margin.bottom;\n  }\n  render(range) {\n    d3.select("#bar-chart").select("svg").remove();\n    this.svg = d3.select("#bar-chart").append("svg").attr("width", WIDTH).attr("height", HEIGHT).append("g").attr("transform", `translate(${this.margin.left}, ${this.margin.top})`);\n    this.range = range;\n    const tradesWithinRange = this.trades.filter(trade => {\n      return this.range[0] <= trade.amount && trade.amount <= this.range[1];\n    });\n    const trades = tradesWithinRange.map(trade => {\n      return {\n        partner: trade.partner,\n        amount: trade.amount\n      };\n    });\n    trades.sort(function (left, right) {\n      if (left.amount < right.amount) {\n        return 1;\n      } else if (left.amount > right.amount) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    const top10Trades = trades.length > 10 ? trades.slice(0, 10) : trades;\n\n    // X axis\n    const x = d3.scaleLinear().domain([0, this.range[1]]).range([0, this.width]);\n    this.svg.append("g").attr("transform", `translate(0, ${this.height})`).call(d3.axisBottom(x)).selectAll("text").attr("transform", "translate(-10,0)rotate(-45)").style("text-anchor", "end").style("font-size", "13px");\n\n    // Y axis\n    const y = d3.scaleBand().range([0, this.height]).domain(top10Trades.map(trade => trade.partner)).padding(.4);\n    this.svg.append("g").call(d3.axisLeft(y)).style("font-size", "15px");\n\n    // Bars with animation\n    this.svg.selectAll("myRect").data(top10Trades).join("rect").attr("x", x(0)).attr("y", trade => y(trade.partner)).attr("width", 0).transition().duration(1000).delay(function (trade, i) {\n      return i * 50;\n    }).attr("width", trade => x(trade.amount)).attr("height", y.bandwidth()).attr("fill", BAR_COLOR);\n\n    // Chart Label\n    this.svg.append(\'text\').attr(\'x\', this.width / 2).attr(\'y\', this.height + 70).attr(\'text-anchor\', \'middle\').text(\'Trade Amount (US$ Thousand)\');\n  }\n}\n/* harmony default export */ var barChart = (BarChart);\n;// CONCATENATED MODULE: ./src/scripts/rangeSlider.js\n\nconst SLIDER_WIDTH = 935;\nconst SLIDER_COLOR = \'#5c9946\';\nconst CONTAINER_WIDTH = 1000;\nconst CONTAINER_HEIGHT = 90;\nclass RangeSlider {\n  constructor(trades) {\n    this.trades = trades;\n    const top10thTradeAmount = Math.ceil(this.trades[10].amount);\n    this.range = [0, top10thTradeAmount];\n    this.barChart = new barChart(this.trades, this.range);\n    let that = this;\n    this.slider = d3.sliderBottom().min(d3.min(this.range)).max(d3.max(this.range)).width(SLIDER_WIDTH).tickFormat(d3.format(\',.0f\')).ticks(10).default([this.range[0], this.range[1]]).handle(d3.symbol().type(d3.symbolCircle).size(200)).fill(SLIDER_COLOR).on(\'onchange\', function (range) {\n      that.range = range;\n      that._renderTradePartnersWithinRange();\n      that.barChart.render(range);\n    });\n    this.gRange = d3.select(\'#range-slider\').append(\'svg\').attr(\'width\', CONTAINER_WIDTH).attr(\'height\', CONTAINER_HEIGHT).append(\'g\').attr(\'transform\', \'translate(30,30)\');\n  }\n  render() {\n    this.gRange.call(this.slider);\n    d3.select(\'p#value-range\').text(this.slider.value().map(d3.format(\',.0f\')).join(\'-\'));\n  }\n  _renderTradePartnersWithinRange() {\n    d3.selectAll(".country").classed("selected-by-range-top-10", false);\n    d3.selectAll(".country").classed("selected-by-range", false);\n    const countries = d3.selectAll(".country");\n    const selected = [];\n    this.trades.forEach(trade => {\n      if (this.range[0] <= trade.amount && trade.amount <= this.range[1]) {\n        countries.each(function (country, i) {\n          const name = country.properties.name;\n          if (trade.partner === name) {\n            selected.push(this);\n          }\n        });\n      }\n    });\n    selected.forEach((el, idx) => {\n      if (idx < 10) {\n        d3.select(el).classed("selected-by-range-top-10", true);\n      } else {\n        d3.select(el).classed("selected-by-range", true);\n      }\n    });\n  }\n}\n/* harmony default export */ var rangeSlider = (RangeSlider);\n;// CONCATENATED MODULE: ./src/scripts/world.js\n\n\nconst world_WIDTH = 900;\nconst world_HEIGHT = 600;\nconst WORLD_MAP_URL = \'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\';\nconst TRADES_URL = "https://qyhappacademy.github.io/portugal_trade_data_visualization/data/all_products.json";\nclass World {\n  constructor(tradeURL) {\n    this.tradeURL = tradeURL;\n    this.width = world_WIDTH;\n    this.height = world_HEIGHT;\n    this.svg = d3.select(\'#world\').append(\'svg\').attr(\'width\', this.width).attr(\'height\', this.height).append("g");\n    this.projection = d3.geoMercator().translate([this.width / 2, this.height / 1.5]).scale(144);\n    this.path = d3.geoPath().projection(this.projection);\n    this.worldMap = this._fetchWorldMap();\n    this.trades = this._fetchTrades();\n  }\n\n  // reset(tradeURL){\n  //     this.tradeURL = tradeURL;\n  //     this.worldMap = this._fetchWorldMap();\n  //     this.trades = this._fetchTrades();\n\n  //     d3.selectAll(".country")\n  //         .each(function (country, i) {\n  //             d3.select(this).classed("selected-top-10", false);\n  //             d3.select(this).classed("selected-by-range", false);\n  //             d3.select(this).classed("selected-by-range-top-10", false);\n  //         });\n  // }\n\n  render() {\n    this.worldMap.then(world => {\n      let that = this;\n      let countries = topojson.feature(world, world.objects.countries).features;\n      this.trades.then(function (trades) {\n        that.svg.selectAll(".country").data(countries).enter().append("path").attr("class", "country").attr("d", that.path).on(\'mouseover\', function (country) {\n          that.mouseOverCountry(country, this, trades);\n        }).on(\'mousemove\', function (country) {\n          that.mouseMove(country, this);\n        }).on(\'mouseout\', function (country) {\n          that.mouseOutCountry(country, this);\n        });\n        const top10TradePartners = trades.slice(0, 10).map(trade => trade.partner);\n        that._renderTradePartners(top10TradePartners);\n        that.rangeSlider = new rangeSlider(trades);\n        that.rangeSlider.render();\n      });\n    });\n  }\n  mouseOverCountry(country, context, trades) {\n    d3.select(context).classed("mouseover", true).style("display: block");\n    const name = country.properties.name;\n    for (let i = 0; i < trades.length; i++) {\n      const trade = trades[i];\n      if (trade.partner === name) {\n        d3.select("#world-tooltip").style("display", "inline")\n        // .style("left", (d3.event.pageX) + "px")\n        // .style("top", (d3.event.pageY) + "px")\n        .insert("div").classed("world-tooltip-content", true);\n        d3.select(".world-tooltip-content").html(trade.toHTML());\n        break;\n      }\n    }\n  }\n  mouseOutCountry(country, context) {\n    d3.select(context).classed("mouseover", false).style("display: none");\n    d3.select("#world-tooltip").style("display", "none");\n    d3.selectAll(".world-tooltip-content").remove();\n  }\n  mouseMove(country, context) {\n    d3.select("#world-tooltip").style("left", d3.event.pageX + "px").style("top", d3.event.pageY + 20 + "px");\n  }\n  async _fetchWorldMap() {\n    return await d3.json(WORLD_MAP_URL);\n  }\n  async _fetchTrades() {\n    const trades = await d3.json(this.tradeURL);\n    const result = [];\n    return this.worldMap.then(world => {\n      let countries = topojson.feature(world, world.objects.countries).features.map(feature => {\n        return feature.properties.name;\n      });\n      trades.Partner.forEach(trade => {\n        const partner = trade["Partner Name"].trim();\n        const matchedPartner = countries.find(country => {\n          if (country.includes(partner) || partner.includes(country)) {\n            return country;\n          }\n        });\n        if (matchedPartner !== undefined) {\n          let tradeAmount = trade["Export (US$ Thousand)"] || trade["Import (US$ Thousand)"];\n          result.push(new scripts_trade(matchedPartner, trade["Year"], trade["Trade Flow"], trade["Product Group"], tradeAmount));\n        }\n      });\n      result.sort(function (left, right) {\n        if (left.amount < right.amount) {\n          return 1;\n        } else if (left.amount > right.amount) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      return result;\n    });\n  }\n  _renderTradePartners(partners) {\n    d3.selectAll(".country").each(function (country, i) {\n      const name = country.properties.name;\n      if (partners.some(function (partner) {\n        return partner === name;\n      })) {\n        d3.select(this).classed("selected-top-10", true);\n      }\n      if (name === getOrigin()) {\n        d3.select(this).classed("origin", true);\n      }\n    });\n  }\n}\n/* harmony default export */ var scripts_world = (World);\n;// CONCATENATED MODULE: ./src/index.js\n\nconst EXPORT_URL = "https://qyhappacademy.github.io/portugal_trade_data_visualization/data/exports.json";\nconst IMPORT_URL = "https://qyhappacademy.github.io/portugal_trade_data_visualization/data/imports.json";\ndocument.addEventListener("DOMContentLoaded", () => {\n  createUserGuide();\n  let world = new scripts_world(IMPORT_URL);\n  world.render();\n  const toggleBtn = document.getElementById("toggle-trade-button");\n  toggleBtn.addEventListener("click", event => {\n    event.preventDefault();\n    toggleBtn.children[0].children[0].innerText = world.tradeURL === EXPORT_URL ? "To Exports" : "To Imports";\n    src_reset();\n    const projectTitle = document.getElementById("project-title");\n    projectTitle.innerText = world.tradeURL === EXPORT_URL ? "Portugal Imports Data Visualization" : "Portugal Exports Data Visualization";\n    world = world.tradeURL === EXPORT_URL ? new scripts_world(IMPORT_URL) : new scripts_world(EXPORT_URL);\n    world.render();\n\n    // world = world.tradeURL === EXPORT_URL ? new World(IMPORT_URL) : new World(EXPORT_URL);\n    // reset(world);\n  });\n});\n\nfunction src_reset() {\n  document.getElementById("world").innerHTML = "";\n  document.getElementById("world-tooltip").innerHTML = "";\n  document.getElementById("range-slider").innerHTML = "";\n  document.getElementById("bar-chart").innerHTML = "";\n}\nfunction createUserGuide() {\n  const userGuide = document.getElementById("user-guide-modal");\n\n  // Get the button that opens the user guide\n  document.getElementById("user-guide-button").addEventListener("click", event => {\n    event.preventDefault();\n    userGuide.style.display = "block";\n  });\n\n  // Get the <span> element that closes the user guide\n  document.getElementsByClassName("close")[0].addEventListener("click", event => {\n    event.preventDefault();\n    userGuide.style.display = "none";\n  });\n\n  // When the user clicks anywhere outside of the user guide, close it\n  window.addEventListener("click", event => {\n    // event.preventDefault();\n    if (event.target == userGuide) {\n      userGuide.style.display = "none";\n    }\n  });\n}\n\n// function reset(world){\n//     document.getElementById("world-tooltip").innerHTML = "";\n//     document.getElementById("range-slider").innerHTML = "";\n//     document.getElementById("bar-chart").innerHTML = "";\n\n//     world.reset(world.tradeURL === EXPORT_URL ? IMPORT_URL : EXPORT_URL);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90\n')},37:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0dWd1ZXNlX29jZWFuaWNfdHJhZGVfcm91dGVzX2RhdGFfdmlzdWFsaXphdGlvbi8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n")}};__webpack_modules__[90]();var __webpack_exports__={};__webpack_modules__[37]()})();